# Copyright 2022 Centro ALGORITMI - University of Minho
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.

apiVersion: v1
kind: Secret
metadata:
  name: mongodb-k8s-secret
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.mongo.name }}
type: Opaque
data:
  mongodb_username: {{ .Values.mongo.user }}
  mongodb_password: {{ .Values.mongo.password }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: {{ .Values.mongo.name }}
  name: {{ .Values.mongo.name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.mongo.name }}
  replicas: {{ .Values.mongo.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.mongo.name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.mongo.name }}
      namespace: {{ .Release.Namespace }}
    spec:
      containers:
      - image: "{{ .Values.mongo.image }}"
        name: {{ .Values.mongo.name }}
        ports:
          - containerPort: {{ .Values.mongo.service.port }}
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.mongo.name }}-secret
                key: mongodb_username
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.mongo.name }}-secret
                key: mongodb_password     
        volumeMounts:
        - name: mongodb-k8s-storage
          mountPath: /{{ .Values.mongo.name }}/mongodb
      volumes:
        - name: mongodb-k8s-storage
          persistentVolumeClaim:
            claimName: {{ .Values.mongo.name }}-pvc
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: {{ .Values.mongo.name }} 
  name: {{ .Values.mongo.name }}
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - protocol: TCP
    port: {{ .Values.mongo.service.port }}
    targetPort: {{ .Values.mongo.service.port }}
  selector:
    app.kubernetes.io/name: {{ .Values.mongo.name }}
  type: {{ .Values.mongo.service.type }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.mongo.name }}-pvc
  namespace: {{ .Release.Namespace }}
spec:
  storageClassName: {{ .Values.mongo.name }}-class
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.mongo.storage }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.mongo.name }}-storage
  labels:
    app.kubernetes.io/name: {{ .Values.mongo.name }}  
spec:
  storageClassName: {{ .Values.mongo.name }}-class
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/{{ .Values.mongo.name }}/mongodb/"
